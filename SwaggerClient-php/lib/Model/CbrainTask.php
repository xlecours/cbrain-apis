<?php
/**
 * CbrainTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * Interface to control CBRAIN operations
 *
 * OpenAPI spec version: 4.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CbrainTask Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CbrainTask implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CbrainTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'batch_id' => 'int',
        'cluster_jobid' => 'string',
        'cluster_workdir' => 'string',
        'params' => 'string',
        'status' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'user_id' => 'float',
        'bourreau_id' => 'float',
        'prerequisites' => 'string',
        'share_wd_tid' => 'float',
        'run_number' => 'float',
        'group_id' => 'float',
        'tool_config_id' => 'float',
        'level' => 'float',
        'rank' => 'float',
        'results_data_provider_id' => 'float',
        'workdir_archived' => 'string',
        'workdir_archive_userfile_id' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'batch_id' => 'batch_id',
        'cluster_jobid' => 'cluster_jobid',
        'cluster_workdir' => 'cluster_workdir',
        'params' => 'params',
        'status' => 'status',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'user_id' => 'user_id',
        'bourreau_id' => 'bourreau_id',
        'prerequisites' => 'prerequisites',
        'share_wd_tid' => 'share_wd_tid',
        'run_number' => 'run_number',
        'group_id' => 'group_id',
        'tool_config_id' => 'tool_config_id',
        'level' => 'level',
        'rank' => 'rank',
        'results_data_provider_id' => 'results_data_provider_id',
        'workdir_archived' => 'workdir_archived',
        'workdir_archive_userfile_id' => 'workdir_archive_userfile_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'batch_id' => 'setBatchId',
        'cluster_jobid' => 'setClusterJobid',
        'cluster_workdir' => 'setClusterWorkdir',
        'params' => 'setParams',
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'user_id' => 'setUserId',
        'bourreau_id' => 'setBourreauId',
        'prerequisites' => 'setPrerequisites',
        'share_wd_tid' => 'setShareWdTid',
        'run_number' => 'setRunNumber',
        'group_id' => 'setGroupId',
        'tool_config_id' => 'setToolConfigId',
        'level' => 'setLevel',
        'rank' => 'setRank',
        'results_data_provider_id' => 'setResultsDataProviderId',
        'workdir_archived' => 'setWorkdirArchived',
        'workdir_archive_userfile_id' => 'setWorkdirArchiveUserfileId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'batch_id' => 'getBatchId',
        'cluster_jobid' => 'getClusterJobid',
        'cluster_workdir' => 'getClusterWorkdir',
        'params' => 'getParams',
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'user_id' => 'getUserId',
        'bourreau_id' => 'getBourreauId',
        'prerequisites' => 'getPrerequisites',
        'share_wd_tid' => 'getShareWdTid',
        'run_number' => 'getRunNumber',
        'group_id' => 'getGroupId',
        'tool_config_id' => 'getToolConfigId',
        'level' => 'getLevel',
        'rank' => 'getRank',
        'results_data_provider_id' => 'getResultsDataProviderId',
        'workdir_archived' => 'getWorkdirArchived',
        'workdir_archive_userfile_id' => 'getWorkdirArchiveUserfileId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['batch_id'] = isset($data['batch_id']) ? $data['batch_id'] : null;
        $this->container['cluster_jobid'] = isset($data['cluster_jobid']) ? $data['cluster_jobid'] : null;
        $this->container['cluster_workdir'] = isset($data['cluster_workdir']) ? $data['cluster_workdir'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['bourreau_id'] = isset($data['bourreau_id']) ? $data['bourreau_id'] : null;
        $this->container['prerequisites'] = isset($data['prerequisites']) ? $data['prerequisites'] : null;
        $this->container['share_wd_tid'] = isset($data['share_wd_tid']) ? $data['share_wd_tid'] : null;
        $this->container['run_number'] = isset($data['run_number']) ? $data['run_number'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['tool_config_id'] = isset($data['tool_config_id']) ? $data['tool_config_id'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['results_data_provider_id'] = isset($data['results_data_provider_id']) ? $data['results_data_provider_id'] : null;
        $this->container['workdir_archived'] = isset($data['workdir_archived']) ? $data['workdir_archived'] : null;
        $this->container['workdir_archive_userfile_id'] = isset($data['workdir_archive_userfile_id']) ? $data['workdir_archive_userfile_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique identifier for the Task.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets batch_id
     * @return int
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     * @param int $batch_id ID of the batch this task was launched as part of. Batches of tasks consist of the same task, with the same parameters, being run on many different input files.
     * @return $this
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets cluster_jobid
     * @return string
     */
    public function getClusterJobid()
    {
        return $this->container['cluster_jobid'];
    }

    /**
     * Sets cluster_jobid
     * @param string $cluster_jobid ID of the task on the cluster associated with this task.
     * @return $this
     */
    public function setClusterJobid($cluster_jobid)
    {
        $this->container['cluster_jobid'] = $cluster_jobid;

        return $this;
    }

    /**
     * Gets cluster_workdir
     * @return string
     */
    public function getClusterWorkdir()
    {
        return $this->container['cluster_workdir'];
    }

    /**
     * Sets cluster_workdir
     * @param string $cluster_workdir Path on the cluster to the working directory.
     * @return $this
     */
    public function setClusterWorkdir($cluster_workdir)
    {
        $this->container['cluster_workdir'] = $cluster_workdir;

        return $this;
    }

    /**
     * Gets params
     * @return string
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     * @param string $params Parameters used as inputs to the scientific calculation associated with the task.
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Current status of the task.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at Date created.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at Last updated.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_id
     * @return float
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param float $user_id ID of the User who created the Task.
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets bourreau_id
     * @return float
     */
    public function getBourreauId()
    {
        return $this->container['bourreau_id'];
    }

    /**
     * Sets bourreau_id
     * @param float $bourreau_id ID of the Bourreau the Task was launched on.
     * @return $this
     */
    public function setBourreauId($bourreau_id)
    {
        $this->container['bourreau_id'] = $bourreau_id;

        return $this;
    }

    /**
     * Gets prerequisites
     * @return string
     */
    public function getPrerequisites()
    {
        return $this->container['prerequisites'];
    }

    /**
     * Sets prerequisites
     * @param string $prerequisites List of prerequisites.
     * @return $this
     */
    public function setPrerequisites($prerequisites)
    {
        $this->container['prerequisites'] = $prerequisites;

        return $this;
    }

    /**
     * Gets share_wd_tid
     * @return float
     */
    public function getShareWdTid()
    {
        return $this->container['share_wd_tid'];
    }

    /**
     * Sets share_wd_tid
     * @param float $share_wd_tid share_wd_tid
     * @return $this
     */
    public function setShareWdTid($share_wd_tid)
    {
        $this->container['share_wd_tid'] = $share_wd_tid;

        return $this;
    }

    /**
     * Gets run_number
     * @return float
     */
    public function getRunNumber()
    {
        return $this->container['run_number'];
    }

    /**
     * Sets run_number
     * @param float $run_number The number of attempts that it has taken to run the task.
     * @return $this
     */
    public function setRunNumber($run_number)
    {
        $this->container['run_number'] = $run_number;

        return $this;
    }

    /**
     * Gets group_id
     * @return float
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     * @param float $group_id ID of the group that this task is being run in.
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets tool_config_id
     * @return float
     */
    public function getToolConfigId()
    {
        return $this->container['tool_config_id'];
    }

    /**
     * Sets tool_config_id
     * @param float $tool_config_id ID number that specifies which Tool Config to use. The Tool Config specifies environment variables and other system-specific scripts necessary for the Task to be run in the target environment.
     * @return $this
     */
    public function setToolConfigId($tool_config_id)
    {
        $this->container['tool_config_id'] = $tool_config_id;

        return $this;
    }

    /**
     * Gets level
     * @return float
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param float $level level
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets rank
     * @return float
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     * @param float $rank rank
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets results_data_provider_id
     * @return float
     */
    public function getResultsDataProviderId()
    {
        return $this->container['results_data_provider_id'];
    }

    /**
     * Sets results_data_provider_id
     * @param float $results_data_provider_id ID of the Data Provider that contains the Userfile that represents the results of the task.
     * @return $this
     */
    public function setResultsDataProviderId($results_data_provider_id)
    {
        $this->container['results_data_provider_id'] = $results_data_provider_id;

        return $this;
    }

    /**
     * Gets workdir_archived
     * @return string
     */
    public function getWorkdirArchived()
    {
        return $this->container['workdir_archived'];
    }

    /**
     * Sets workdir_archived
     * @param string $workdir_archived Boolean variable that indicates whether the working directory of the task is available on the processing server or has been archived and is no longer accessible.
     * @return $this
     */
    public function setWorkdirArchived($workdir_archived)
    {
        $this->container['workdir_archived'] = $workdir_archived;

        return $this;
    }

    /**
     * Gets workdir_archive_userfile_id
     * @return float
     */
    public function getWorkdirArchiveUserfileId()
    {
        return $this->container['workdir_archive_userfile_id'];
    }

    /**
     * Sets workdir_archive_userfile_id
     * @param float $workdir_archive_userfile_id ID of the userfile created as part of the archival process, if the task's working directory has been archived.
     * @return $this
     */
    public function setWorkdirArchiveUserfileId($workdir_archive_userfile_id)
    {
        $this->container['workdir_archive_userfile_id'] = $workdir_archive_userfile_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


