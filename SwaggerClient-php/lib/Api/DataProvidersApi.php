<?php
/**
 * DataProvidersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * Interface to control CBRAIN operations
 *
 * OpenAPI spec version: 4.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DataProvidersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataProvidersApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DataProvidersApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation dataProvidersGet
     *
     * Get a list of the Data Providers available to the current user.
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DataProvider[]
     */
    public function dataProvidersGet()
    {
        list($response) = $this->dataProvidersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation dataProvidersGetWithHttpInfo
     *
     * Get a list of the Data Providers available to the current user.
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DataProvider[], HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProvidersGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/data_providers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataProvider[]',
                '/data_providers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataProvider[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataProvider[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dataProvidersIdBrowseGet
     *
     * List the files on a Data Provider.
     *
     * @param int $id The ID of the Data Provider to browse. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function dataProvidersIdBrowseGet($id)
    {
        list($response) = $this->dataProvidersIdBrowseGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation dataProvidersIdBrowseGetWithHttpInfo
     *
     * List the files on a Data Provider.
     *
     * @param int $id The ID of the Data Provider to browse. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProvidersIdBrowseGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling dataProvidersIdBrowseGet');
        }
        // parse inputs
        $resourcePath = "/data_providers/{id}/browse";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/data_providers/{id}/browse'
            );
            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation dataProvidersIdDeletePost
     *
     * Deletes unregistered files from a CBRAIN Data provider.
     *
     * @param int $id The ID of the Data Provider to delete files from. (required)
     * @param \Swagger\Client\Model\Params6 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function dataProvidersIdDeletePost($id, $params = null)
    {
        list($response) = $this->dataProvidersIdDeletePostWithHttpInfo($id, $params);
        return $response;
    }

    /**
     * Operation dataProvidersIdDeletePostWithHttpInfo
     *
     * Deletes unregistered files from a CBRAIN Data provider.
     *
     * @param int $id The ID of the Data Provider to delete files from. (required)
     * @param \Swagger\Client\Model\Params6 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProvidersIdDeletePostWithHttpInfo($id, $params = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling dataProvidersIdDeletePost');
        }
        // parse inputs
        $resourcePath = "/data_providers/{id}/delete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/data_providers/{id}/delete'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation dataProvidersIdGet
     *
     * Get information on a particular Data Provider.
     *
     * @param int $id ID of the Data Provider to get information on. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DataProvider
     */
    public function dataProvidersIdGet($id)
    {
        list($response) = $this->dataProvidersIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation dataProvidersIdGetWithHttpInfo
     *
     * Get information on a particular Data Provider.
     *
     * @param int $id ID of the Data Provider to get information on. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DataProvider, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProvidersIdGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling dataProvidersIdGet');
        }
        // parse inputs
        $resourcePath = "/data_providers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataProvider',
                '/data_providers/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataProvider', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataProvider', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dataProvidersIdIsAliveGet
     *
     * Pings a Data Provider to check if it's running.
     *
     * @param int $id The ID of the Data Provider to query. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function dataProvidersIdIsAliveGet($id)
    {
        list($response) = $this->dataProvidersIdIsAliveGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation dataProvidersIdIsAliveGetWithHttpInfo
     *
     * Pings a Data Provider to check if it's running.
     *
     * @param int $id The ID of the Data Provider to query. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProvidersIdIsAliveGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling dataProvidersIdIsAliveGet');
        }
        // parse inputs
        $resourcePath = "/data_providers/{id}/is_alive";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/data_providers/{id}/is_alive'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dataProvidersIdRegisterPost
     *
     * Registers a file as a Userfile in CBRAIN.
     *
     * @param int $id The ID of the Data Provider to register files on. (required)
     * @param \Swagger\Client\Model\Params4 $params  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function dataProvidersIdRegisterPost($id, $params)
    {
        list($response) = $this->dataProvidersIdRegisterPostWithHttpInfo($id, $params);
        return $response;
    }

    /**
     * Operation dataProvidersIdRegisterPostWithHttpInfo
     *
     * Registers a file as a Userfile in CBRAIN.
     *
     * @param int $id The ID of the Data Provider to register files on. (required)
     * @param \Swagger\Client\Model\Params4 $params  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProvidersIdRegisterPostWithHttpInfo($id, $params)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling dataProvidersIdRegisterPost');
        }
        // verify the required parameter 'params' is set
        if ($params === null) {
            throw new \InvalidArgumentException('Missing the required parameter $params when calling dataProvidersIdRegisterPost');
        }
        // parse inputs
        $resourcePath = "/data_providers/{id}/register";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/data_providers/{id}/register'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation dataProvidersIdUnregisterPost
     *
     * Unregisters files as Userfile in CBRAIN.
     *
     * @param int $id The ID of the Data Provider to unregister files from. (required)
     * @param \Swagger\Client\Model\Params5 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function dataProvidersIdUnregisterPost($id, $params = null)
    {
        list($response) = $this->dataProvidersIdUnregisterPostWithHttpInfo($id, $params);
        return $response;
    }

    /**
     * Operation dataProvidersIdUnregisterPostWithHttpInfo
     *
     * Unregisters files as Userfile in CBRAIN.
     *
     * @param int $id The ID of the Data Provider to unregister files from. (required)
     * @param \Swagger\Client\Model\Params5 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataProvidersIdUnregisterPostWithHttpInfo($id, $params = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling dataProvidersIdUnregisterPost');
        }
        // parse inputs
        $resourcePath = "/data_providers/{id}/unregister";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/data_providers/{id}/unregister'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
