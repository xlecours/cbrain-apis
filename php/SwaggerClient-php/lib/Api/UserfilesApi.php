<?php
/**
 * UserfilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * Interface to control CBRAIN operations
 *
 * OpenAPI spec version: 4.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * UserfilesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserfilesApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UserfilesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation userfilesChangeProviderPost
     *
     * Moves the Userfiles from their current Data Provider to a new one.
     *
     * @param \Swagger\Client\Model\Params15 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesChangeProviderPost($params = null)
    {
        list($response) = $this->userfilesChangeProviderPostWithHttpInfo($params);
        return $response;
    }

    /**
     * Operation userfilesChangeProviderPostWithHttpInfo
     *
     * Moves the Userfiles from their current Data Provider to a new one.
     *
     * @param \Swagger\Client\Model\Params15 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesChangeProviderPostWithHttpInfo($params = null)
    {
        // parse inputs
        $resourcePath = "/userfiles/change_provider";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/change_provider'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesCompressPost
     *
     * Compresses many Userfiles each into their own GZIP archive.
     *
     * @param \Swagger\Client\Model\Params16 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesCompressPost($params = null)
    {
        list($response) = $this->userfilesCompressPostWithHttpInfo($params);
        return $response;
    }

    /**
     * Operation userfilesCompressPostWithHttpInfo
     *
     * Compresses many Userfiles each into their own GZIP archive.
     *
     * @param \Swagger\Client\Model\Params16 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesCompressPostWithHttpInfo($params = null)
    {
        // parse inputs
        $resourcePath = "/userfiles/compress";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/compress'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesDeleteFilesPost
     *
     * Delete several files that have been registered as Userfiles
     *
     * @param \Swagger\Client\Model\Params14 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesDeleteFilesPost($params = null)
    {
        list($response) = $this->userfilesDeleteFilesPostWithHttpInfo($params);
        return $response;
    }

    /**
     * Operation userfilesDeleteFilesPostWithHttpInfo
     *
     * Delete several files that have been registered as Userfiles
     *
     * @param \Swagger\Client\Model\Params14 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesDeleteFilesPostWithHttpInfo($params = null)
    {
        // parse inputs
        $resourcePath = "/userfiles/delete_files";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/delete_files'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesDownloadPost
     *
     * Download several files
     *
     * @param \Swagger\Client\Model\Params13 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesDownloadPost($params = null)
    {
        list($response) = $this->userfilesDownloadPostWithHttpInfo($params);
        return $response;
    }

    /**
     * Operation userfilesDownloadPostWithHttpInfo
     *
     * Download several files
     *
     * @param \Swagger\Client\Model\Params13 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesDownloadPostWithHttpInfo($params = null)
    {
        // parse inputs
        $resourcePath = "/userfiles/download";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/download'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesGet
     *
     * List of the Userfiles accessible to the current user.
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Userfile[]
     */
    public function userfilesGet()
    {
        list($response) = $this->userfilesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation userfilesGetWithHttpInfo
     *
     * List of the Userfiles accessible to the current user.
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Userfile[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/userfiles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Userfile[]',
                '/userfiles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Userfile[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Userfile[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesIdContentGet
     *
     * Get the content of a Userfile
     *
     * @param int $id The ID number of the Userfile to download (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesIdContentGet($id)
    {
        list($response) = $this->userfilesIdContentGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation userfilesIdContentGetWithHttpInfo
     *
     * Get the content of a Userfile
     *
     * @param int $id The ID number of the Userfile to download (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesIdContentGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userfilesIdContentGet');
        }
        // parse inputs
        $resourcePath = "/userfiles/{id}/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/{id}/content'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesIdDelete
     *
     * Delete a Userfile.
     *
     * @param int $id The ID number of the Userfile to delete. (required)
     * @param \Swagger\Client\Model\Params12 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesIdDelete($id, $params = null)
    {
        list($response) = $this->userfilesIdDeleteWithHttpInfo($id, $params);
        return $response;
    }

    /**
     * Operation userfilesIdDeleteWithHttpInfo
     *
     * Delete a Userfile.
     *
     * @param int $id The ID number of the Userfile to delete. (required)
     * @param \Swagger\Client\Model\Params12 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesIdDeleteWithHttpInfo($id, $params = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userfilesIdDelete');
        }
        // parse inputs
        $resourcePath = "/userfiles/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesIdGet
     *
     * Get information on a Userfile.
     *
     * @param int $id The ID number of the Userfile to get information on. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Userfile
     */
    public function userfilesIdGet($id)
    {
        list($response) = $this->userfilesIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation userfilesIdGetWithHttpInfo
     *
     * Get information on a Userfile.
     *
     * @param int $id The ID number of the Userfile to get information on. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Userfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesIdGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userfilesIdGet');
        }
        // parse inputs
        $resourcePath = "/userfiles/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Userfile',
                '/userfiles/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Userfile', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Userfile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesIdPut
     *
     * Update information on a Userfile.
     *
     * @param int $id The ID number of the Userfile to update. (required)
     * @param \Swagger\Client\Model\Params11 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesIdPut($id, $params = null)
    {
        list($response) = $this->userfilesIdPutWithHttpInfo($id, $params);
        return $response;
    }

    /**
     * Operation userfilesIdPutWithHttpInfo
     *
     * Update information on a Userfile.
     *
     * @param int $id The ID number of the Userfile to update. (required)
     * @param \Swagger\Client\Model\Params11 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesIdPutWithHttpInfo($id, $params = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userfilesIdPut');
        }
        // parse inputs
        $resourcePath = "/userfiles/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesPost
     *
     * Creates a new Userfile.
     *
     * @param \SplFileObject $upload_file File to upload to CBRAIN (optional)
     * @param int $data_provider_id The ID of the Data Provider to upload the file to. (optional)
     * @param int $userfile_group_id ID of the group that will have access to the Userfile (optional)
     * @param string $file_type The type of the file (optional)
     * @param string $archive Archive (optional)
     * @param string $authenticity_token The token returned by /session/new (optional)
     * @param string $_up_ex_mode usually \&quot;collection\&quot; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesPost($upload_file = null, $data_provider_id = null, $userfile_group_id = null, $file_type = null, $archive = null, $authenticity_token = null, $_up_ex_mode = null)
    {
        list($response) = $this->userfilesPostWithHttpInfo($upload_file, $data_provider_id, $userfile_group_id, $file_type, $archive, $authenticity_token, $_up_ex_mode);
        return $response;
    }

    /**
     * Operation userfilesPostWithHttpInfo
     *
     * Creates a new Userfile.
     *
     * @param \SplFileObject $upload_file File to upload to CBRAIN (optional)
     * @param int $data_provider_id The ID of the Data Provider to upload the file to. (optional)
     * @param int $userfile_group_id ID of the group that will have access to the Userfile (optional)
     * @param string $file_type The type of the file (optional)
     * @param string $archive Archive (optional)
     * @param string $authenticity_token The token returned by /session/new (optional)
     * @param string $_up_ex_mode usually \&quot;collection\&quot; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesPostWithHttpInfo($upload_file = null, $data_provider_id = null, $userfile_group_id = null, $file_type = null, $archive = null, $authenticity_token = null, $_up_ex_mode = null)
    {
        // parse inputs
        $resourcePath = "/userfiles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($upload_file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['upload_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($upload_file));
            } else {
                $formParams['upload_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($upload_file);
            }
        }
        // form params
        if ($data_provider_id !== null) {
            $formParams['data_provider_id'] = $this->apiClient->getSerializer()->toFormValue($data_provider_id);
        }
        // form params
        if ($userfile_group_id !== null) {
            $formParams['userfile[group_id]'] = $this->apiClient->getSerializer()->toFormValue($userfile_group_id);
        }
        // form params
        if ($file_type !== null) {
            $formParams['file_type'] = $this->apiClient->getSerializer()->toFormValue($file_type);
        }
        // form params
        if ($archive !== null) {
            $formParams['archive'] = $this->apiClient->getSerializer()->toFormValue($archive);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = $this->apiClient->getSerializer()->toFormValue($authenticity_token);
        }
        // form params
        if ($_up_ex_mode !== null) {
            $formParams['_up_ex_mode'] = $this->apiClient->getSerializer()->toFormValue($_up_ex_mode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesSyncMultiplePost
     *
     * Syncs Userfiles to their Data Providers' cache.
     *
     * @param \Swagger\Client\Model\Params18 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesSyncMultiplePost($params = null)
    {
        list($response) = $this->userfilesSyncMultiplePostWithHttpInfo($params);
        return $response;
    }

    /**
     * Operation userfilesSyncMultiplePostWithHttpInfo
     *
     * Syncs Userfiles to their Data Providers' cache.
     *
     * @param \Swagger\Client\Model\Params18 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesSyncMultiplePostWithHttpInfo($params = null)
    {
        // parse inputs
        $resourcePath = "/userfiles/sync_multiple";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/sync_multiple'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userfilesUncompressPost
     *
     * Uncompresses many Userfiles.
     *
     * @param \Swagger\Client\Model\Params17 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function userfilesUncompressPost($params = null)
    {
        list($response) = $this->userfilesUncompressPostWithHttpInfo($params);
        return $response;
    }

    /**
     * Operation userfilesUncompressPostWithHttpInfo
     *
     * Uncompresses many Userfiles.
     *
     * @param \Swagger\Client\Model\Params17 $params The params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesUncompressPostWithHttpInfo($params = null)
    {
        // parse inputs
        $resourcePath = "/userfiles/uncompress";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userfiles/uncompress'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
